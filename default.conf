map $ssl_client_s_dn  $ssl_client_s_dn_cn {
    default "nothing";
    ~CN=(?<CN>[^,]+) $CN;

}

server {
    listen 443 ssl;
    server_name localhost;
    # add hosts your domain for local requests# server certificate
    
    ssl_certificate     /etc/nginx/certs/server/server.crt;
    ssl_certificate_key /etc/nginx/certs/server/server.key;
    ssl_client_certificate /etc/nginx/certs/ca/ca.crt; # need to validate client certificate(if this flag optional_no_ca it won't validate client certificates)
    
    ssl_verify_client on;
    
    location / {
       
        auth_request /auth;
	auth_request_set $auth_status $upstream_status;
        # remote ip and forwarding ip
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;# certificate verification information
        # if the client certificate verified 
        
	# will have the value of 'SUCCESS' and 'NONE' otherwise
        
	proxy_set_header VERIFIED $ssl_client_verify;
        
        # client certificate information(DN)
               
       
        proxy_set_header ssl-client-verify      $ssl_client_verify;
        proxy_set_header ssl-client-subject-dn  $ssl_client_s_dn;
        proxy_set_header ssl-client-issuer-dn   $ssl_client_i_dn;


        proxy_set_header super special;
	proxy_pass https://echo:443;
    }

    location = /auth {
            internal;
            proxy_pass              https://python_server:5000/auth;
            proxy_pass_request_body off;

 	    proxy_set_header        WWW-authenticate $ssl_client_s_dn_cn;
            proxy_set_header        Content-Length "";
            proxy_set_header        X-Original-URI $request_uri;
        }
}
